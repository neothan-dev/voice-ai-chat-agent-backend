name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read
  security-events: write

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio httpx
    
    - name: Lint with flake8
      run: |
        pip install flake8
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Type check with mypy
      continue-on-error: true
      run: |
        pip install mypy types-requests
        mypy core models --ignore-missing-imports --explicit-package-bases
    
    - name: Test with pytest
      run: |
        rc=0
        pytest --cov=. --cov-report=xml --cov-report=html || rc=$?
        if [ "$rc" -eq 5 ]; then
          echo "Pytest: no tests collected, treating as success."
          exit 0
        fi
        exit "$rc"
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  docker:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build -t voice-ai-backend:test .
    
    - name: Test Docker image
      run: |
        # 按项目启动规则运行容器并做健康检查
        docker run -d --name voice-ai-backend-test -p 8080:8080 -e PORT=8080 voice-ai-backend:test
        echo "等待服务就绪..."
        for i in $(seq 1 30); do
          if curl -s http://127.0.0.1:8080/ping | grep -q '"status":"healthy"'; then
            echo "服务健康检查通过"; break; fi; sleep 2; done
        # 若未通过，输出日志并失败
        if ! curl -s http://127.0.0.1:8080/ping | grep -q '"status":"healthy"'; then
          echo "健康检查失败，打印容器日志：";
          docker logs voice-ai-backend-test || true
          exit 1
        fi
        # 清理容器
        docker rm -f voice-ai-backend-test
